# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

'.source.js':
  'AMD Define':
    'prefix': 'df'
    'body': '''
            define([
              ${1}
            ], function (${2}) {
              ${3}
            });


            '''
  'then':
    'prefix': 'then'
    'body': '''
            .then(function ($1) {
              $2
            })
            '''
  'fori':
    'prefix': 'fori'
    'body': '''
            for(var $1; $1 < $2; $1++) {
              $3
            }
            '''

'.source.js.jsx':
  'Arrow function':
    'prefix': 'f'
    'body': '''
            ($1) => {
              $2
            }
            '''
  'Anonymous function':
    'prefix': 'fn'
    'body': '''
            function ($1) {
              $2
            }
            '''
  'Lambda':
    'prefix': 'l'
    'body': '''
            $1 => $2
            '''
  'then':
    'prefix': 'then'
    'body': '''
            .then(($1) => {
              $2
            })
            '''

'.text.html.basic':
  'Angular hb':
    'prefix': 'hb'
    'body': '{{ $1 }}'

'.text.jade':
  'Angular hb':
    'prefix': 'hb'
    'body': '{{ $1 }}'

'.source.python':
  'trace':
    'prefix': 'trace'
    'body': '''
            import traceback; traceback.print_stack()
            '''

'.source.ts':
  'trace':
    'prefix': 'log'
    'body': '''
            console.log(${1});
            '''
  'Arrow function':
    'prefix': 'f'
    'body': '''
            ($1) => {
              $2
            }
            '''
  'Lambda function':
    'prefix': 'l'
    'body': '''
            ($1) => $2
            '''
  'internal':
    'prefix': 'int'
    'body': '''
            /** @internal */
            '''
  'command':
    'prefix': 'n-c'
    'body': '''
            export interface ${1}${2}Command extends ${1}${2}Payload {
              type: ${1}Commands.${1}${2}Command;
            }

            '''


'.source.json':
  'Key Value':
    'prefix': 'kv'
    'body': '''
            "${1}": ${2}${3:,}
            '''